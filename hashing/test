class HashTable:
    def __init__(self):
        self.size = 10
        self.map = [None]*self.size
    
    def _get_hash(self, key):
        #pass
        hash_value = 0
        for char in str(key):
            hash_value += ord(char)
        return hash_value % self.size
    
    def _linear_probing(self, key, index):
        #pass
        return (self._get_hash(key) + index) % self.size

    def _probing(self, key):
        #pass
        for index in range(self.size):
            probeHash = self._linear_probing(key, index)
            if self.map[probeHash] is None:
                return probeHash
        return None

    def add(self, key, value):
        #pass
        key_hash = self._get_hash(key)
        key_value = (key, value)
        if self.map[key_hash] is None :
            self.map[key_hash] = key_value
            return True
        else:
            key_hash = self._probing(key)
            if key_hash is None:
                print("Hash table penuh!")
                return False
        self.map[key_hash] = key_value
        return True

    def print_all(self):
        #pass
        '''
        for i in self.map:
            if i is not None:
                print(str(i))
                '''
        for i in self.map:
            if i is not None and i!= 'deleted':
                print(f"NIM: {i[0]} NAMA: {i[1]}")

    def get_data(self, key):
        #pass
        key_hash = self._get_hash(key)
        if self.map[key_hash] is None or self.map[key_hash][0]!= key:
            key_hash = self._probing(key)
            if key_hash is None:
                return None
        return self.map[key_hash][1]
            
    
    def resize(self, size):
        #pass
        mapp = self.map
        self.size = size
        self.map = [None]*self.size
        for i in self.map:
            if i is not None:
                for a in i :
                    self.add(a[0], a[1])

def main():
    ht : HashTable = HashTable()
    # isi hash table
    ht.add(71210689, "Gian")
    ht.add(71210683, "Yandi")
    ht.add(71210699, "Andreas")

    print("==== HASH TABLE SEBELUM DIRESIZE ====")
    print()
    ht.print_all()
    print(f"mahasiswa dengan NIM 71210683 adalah {ht.get_data(71210683)}")
    print(f"mahasiswa dengan NIM 71210689 adalah {ht.get_data(71210689)}")
    print()
    # resize hash table
    ht.resize(3)

    print("==== HASH TABLE SETELAH DIRESIZE ====")
    print()
    ht.print_all()
    print(f"mahasiswa dengan NIM 71210683 adalah {ht.get_data(71210683)}")
    

if __name__ == "__main__":
    main()
